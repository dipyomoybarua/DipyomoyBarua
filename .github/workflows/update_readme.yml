name: Update README with Repo Stats

on:
  push:
    branches:
      - main
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Calculate Repo Statistics
        id: repo_stats
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          set -o pipefail  # Prevent errors in a pipeline from being masked

          echo "Starting calculation of repository statistics..."

          total_size=0
          stars=0
          forks=0
          latest_commit_date="1970-01-01T00:00:00Z"

          # Fetch all repositories (public and private)
          repos_response=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/user/repos?per_page=100")
          
          # Check if the API call was successful
          if [[ $(echo "$repos_response" | jq '.message') != "null" ]]; then
            echo "Error fetching repositories: $(echo "$repos_response" | jq -r '.message')"
            exit 1
          fi

          # Extract full names of non-fork repositories
          repos=$(echo "$repos_response" | jq -r '.[] | select(.fork==false) | .full_name')

          echo "Found the following repositories:"
          echo "$repos"

          for repo in $repos; do
            echo "Processing repository: $repo"

            # Fetch repository details
            repo_response=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$repo")
            
            # Check if the API call was successful
            if [[ $(echo "$repo_response" | jq '.message') != "null" ]]; then
              echo "Error fetching repository details for $repo: $(echo "$repo_response" | jq -r '.message')"
              continue
            fi

            # Extract size, stars, and forks
            repo_size=$(echo "$repo_response" | jq -r '.size // 0')
            repo_stars=$(echo "$repo_response" | jq -r '.stargazers_count // 0')
            repo_forks=$(echo "$repo_response" | jq -r '.forks_count // 0')

            echo "Size: $repo_size KB, Stars: $repo_stars, Forks: $repo_forks"

            # Get the last commit date of the repo
            commit_response=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$repo/commits?per_page=1")
            
            # Check if the API call was successful
            if [[ $(echo "$commit_response" | jq '.message') != "null" ]]; then
              echo "Error fetching commits for $repo: $(echo "$commit_response" | jq -r '.message')"
              continue
            fi

            repo_commit_date=$(echo "$commit_response" | jq -r '.[0].commit.committer.date')

            echo "Latest Commit Date for $repo: $repo_commit_date"

            # Accumulate totals
            total_size=$((total_size + repo_size))
            stars=$((stars + repo_stars))
            forks=$((forks + repo_forks))

            # Compare and update the latest commit date
            if [[ $(date -d "$repo_commit_date" +%s) -gt $(date -d "$latest_commit_date" +%s) ]]; then
              latest_commit_date=$repo_commit_date
              echo "Updated Latest Commit Date to: $latest_commit_date"
            fi
          done

          # Convert total size to MB
          total_size_mb=$(awk "BEGIN {printf \"%.2f\", $total_size/1024}")

          echo "Total Size: $total_size_mb MB"
          echo "Total Stars: $stars"
          echo "Total Forks: $forks"
          echo "Latest Commit Date: $latest_commit_date"

          # Export variables to GitHub environment
          echo "TOTAL_SIZE=${total_size_mb}MB" >> $GITHUB_ENV
          echo "STARS=$stars" >> $GITHUB_ENV
          echo "FORKS=$forks" >> $GITHUB_ENV
          echo "LATEST_COMMIT=$latest_commit_date" >> $GITHUB_ENV

      - name: Update README
        run: |
          echo "Updating README.md with latest statistics..."
          sed -i "s/__REPO_SIZE_MB__/${{ env.TOTAL_SIZE }}/g" README.md
          sed -i "s/__LATEST_COMMIT__/${{ env.LATEST_COMMIT }}/g" README.md
          sed -i "s/__STARS__/${{ env.STARS }}/g" README.md
          sed -i "s/__FORKS__/${{ env.FORKS }}/g" README.md
          echo "README.md updated successfully."

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'action@github.com'

          echo "Checking Git status..."
          git status

          echo "Stashing any local changes..."
          git stash --include-untracked

          echo "Pulling latest changes from main branch..."
          git pull origin main --rebase

          echo "Applying stashed changes..."
          git stash pop || echo "No stashed changes to apply"

          echo "Adding README.md to commit..."
          git add README.md

          echo "Committing changes..."
          git commit -m "Update README with latest repo stats" || echo "No changes to commit"

          echo "Pushing changes to remote repository..."
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
